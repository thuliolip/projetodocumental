{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dd8c342c",
   "metadata": {},
   "source": [
    "* Protótipo de projeto antifraude documental com base na comparação com documento em salvo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2c5feae",
   "metadata": {},
   "source": [
    "- Adaptado da aula do BootCamp DIO. https://web.dio.me/lab/analise-de-documentos-anti-fraude-com-azureai/learning/c3c9b90b-8dfa-4f18-aefa-1a89a860002d"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65b904a3",
   "metadata": {},
   "source": [
    "- Projeto a adaptar: https://web.dio.me/topics/analise-de-documentos-anti-fraude-com-azureai-tarefa3?back=%2Ftrack%2Fmicrosoft-certification-challenge-4-ai-102&order=undefined&page=1&search=projeto&tab=forum&track_id=5437dc46-3ffb-48f1-a3cd-03bb51968564"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8047080",
   "metadata": {},
   "outputs": [],
   "source": [
    "from src.utils.Config import Config\n",
    "from azure.core.credentials import AzureKeyCredential\n",
    "from azure.ai.documentintelligence import DocumentIntelligenceClient\n",
    "from azure.ai.documentintelligence.models import AnalyzeDocumentRequest\n",
    "\n",
    "credential = AzureKeyCredential(Config.KEY) \n",
    "document_client = DocumentIntelligenceClient(Config.ENDPOINT, credential) \n",
    "\n",
    "card_info = document_client.begin_analyze_document(model_id=\"prebuilt-creditCard\",analyze_request=AnalyzeDocumentRequest(url_source=\"https://documentintelligence.ai.azure.com/documents/samples/prebuilt/credit-card-horizontal.png\"))\n",
    "\n",
    "card_info.result().documents[0]\n",
    "{'docType': 'creditCard', 'boundingRegions': [{'pageNumber': 1, 'polygon': [0, 0, 896, 0, 896, 1120, 0, 1120]}], 'fields': {'CardHolderName': {'type': 'string', 'content': 'ADAM SMITH', 'boundingRegions': [{'pageNumber': 1, 'polygon': [167, 445, 365, 446, 365, 481, 167, 480]}], 'confidence': 0.995, 'spans': [{'offset': 50, 'length': 10}]}, 'CardNumber': {'type': 'string', 'content': '5412 1234 5656 8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [166, 313, 715, 313, 715, 357, 166, 357]}], 'confidence': 0.995, 'spans': [{'offset': 13, 'length': 19}]}, 'CardVerificationValue': {'type': 'string', 'content': '123', 'boundingRegions': [{'pageNumber': 1, 'polygon': [544, 784, 586, 785, 586, 811, 544, 810]}], 'confidence': 0.995, 'spans': [{'offset': 134, 'length': 3}]}, 'CustomerServicePhoneNumbers': {'type': 'array', 'valueArray': [{'type': 'string', 'valueString': '+1 200-345-6789', 'content': '+1 200-345-6789', 'boundingRegions': [{'pageNumber': 1, 'polygon': [324, 610, 447, 610, 447, 627, 324, 627]}], 'spans': [{'offset': 99, 'length': 15}]}, {'type': 'string', 'valueString': '+1 200-000-8888', 'content': '+1 200-000-8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [471, 610, 594, 610, 594, 627, 471, 627]}], 'spans': [{'offset': 118, 'length': 15}]}]}, 'ExpirationDate': {'type': 'date', 'content': '01/28', 'boundingRegions': [{'pageNumber': 1, 'polygon': [227, 391, 319, 391, 319, 424, 226, 424]}], 'confidence': 0.995, 'spans': [{'offset': 39, 'length': 5}]}, 'IssuingBank': {'type': 'string', 'content': 'Contoso Bank', 'boundingRegions': [{'pageNumber': 1, 'polygon': [170, 172, 475, 171, 475, 213, 170, 214]}], 'confidence': 0.995, 'spans': [{'offset': 0, 'length': 12}]}, 'PaymentNetwork': {'type': 'string', 'content': 'mastercard', 'boundingRegions': [{'pageNumber': 1, 'polygon': [632, 464, 717, 463, 717, 477, 632, 477]}], 'confidence': 0.991, 'spans': [{'offset': 61, 'length': 10}]}}, 'confidence': 1, 'spans': [{'offset': 0, 'length': 306}]}\n",
    "\n",
    "card_info.result().documents[0].get('fields',{})\n",
    "{'CardHolderName': {'type': 'string', 'content': 'ADAM SMITH', 'boundingRegions': [{'pageNumber': 1, 'polygon': [167, 445, 365, 446, 365, 481, 167, 480]}], 'confidence': 0.995, 'spans': [{'offset': 50, 'length': 10}]},\n",
    " 'CardNumber': {'type': 'string', 'content': '5412 1234 5656 8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [166, 313, 715, 313, 715, 357, 166, 357]}], 'confidence': 0.995, 'spans': [{'offset': 13, 'length': 19}]},\n",
    " 'CardVerificationValue': {'type': 'string', 'content': '123', 'boundingRegions': [{'pageNumber': 1, 'polygon': [544, 784, 586, 785, 586, 811, 544, 810]}], 'confidence': 0.995, 'spans': [{'offset': 134, 'length': 3}]},\n",
    " 'CustomerServicePhoneNumbers': {'type': 'array', 'valueArray': [{'type': 'string', 'valueString': '+1 200-345-6789', 'content': '+1 200-345-6789', 'boundingRegions': [{'pageNumber': 1, 'polygon': [324, 610, 447, 610, 447, 627, 324, 627]}], 'spans': [{'offset': 99, 'length': 15}]}, {'type': 'string', 'valueString': '+1 200-000-8888', 'content': '+1 200-000-8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [471, 610, 594, 610, 594, 627, 471, 627]}], 'spans': [{'offset': 118, 'length': 15}]}]},\n",
    " 'ExpirationDate': {'type': 'date', 'content': '01/28', 'boundingRegions': [{'pageNumber': 1, 'polygon': [227, 391, 319, 391, 319, 424, 226, 424]}], 'confidence': 0.995, 'spans': [{'offset': 39, 'length': 5}]},\n",
    " 'IssuingBank': {'type': 'string', 'content': 'Contoso Bank', 'boundingRegions': [{'pageNumber': 1, 'polygon': [170, 172, 475, 171, 475, 213, 170, 214]}], 'confidence': 0.995, 'spans': [{'offset': 0, 'length': 12}]},\n",
    " 'PaymentNetwork': {'type': 'string', 'content': 'mastercard', 'boundingRegions': [{'pageNumber': 1, 'polygon': [632, 464, 717, 463, 717, 477, 632, 477]}], 'confidence': 0.991, 'spans': [{'offset': 61, 'length': 10}]}}\n",
    "\n",
    "card_fields = card_info.result().documents[0].get('fields',{})\n",
    "type(card_fields)\n",
    "dict\n",
    "\n",
    "card_fields['CardHolderName']['content']\n",
    "'ADAM SMITH'\n",
    "card_fields.values()\n",
    "dict_values([{'type': 'string', 'content': 'ADAM SMITH', 'boundingRegions': [{'pageNumber': 1, 'polygon': [167, 445, 365, 446, 365, 481, 167, 480]}], 'confidence': 0.995, 'spans': [{'offset': 50, 'length': 10}]}, {'type': 'string', 'content': '5412 1234 5656 8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [166, 313, 715, 313, 715, 357, 166, 357]}], 'confidence': 0.995, 'spans': [{'offset': 13, 'length': 19}]}, {'type': 'string', 'content': '123', 'boundingRegions': [{'pageNumber': 1, 'polygon': [544, 784, 586, 785, 586, 811, 544, 810]}], 'confidence': 0.995, 'spans': [{'offset': 134, 'length': 3}]}, {'type': 'array', 'valueArray': [{'type': 'string', 'valueString': '+1 200-345-6789', 'content': '+1 200-345-6789', 'boundingRegions': [{'pageNumber': 1, 'polygon': [324, 610, 447, 610, 447, 627, 324, 627]}], 'spans': [{'offset': 99, 'length': 15}]}, {'type': 'string', 'valueString': '+1 200-000-8888', 'content': '+1 200-000-8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [471, 610, 594, 610, 594, 627, 471, 627]}], 'spans': [{'offset': 118, 'length': 15}]}]}, {'type': 'date', 'content': '01/28', 'boundingRegions': [{'pageNumber': 1, 'polygon': [227, 391, 319, 391, 319, 424, 226, 424]}], 'confidence': 0.995, 'spans': [{'offset': 39, 'length': 5}]}, {'type': 'string', 'content': 'Contoso Bank', 'boundingRegions': [{'pageNumber': 1, 'polygon': [170, 172, 475, 171, 475, 213, 170, 214]}], 'confidence': 0.995, 'spans': [{'offset': 0, 'length': 12}]}, {'type': 'string', 'content': 'mastercard', 'boundingRegions': [{'pageNumber': 1, 'polygon': [632, 464, 717, 463, 717, 477, 632, 477]}], 'confidence': 0.991, 'spans': [{'offset': 61, 'length': 10}]}])\n",
    "\n",
    "for chave, valor in card_fields.items():\n",
    "    print(f\"chave->{chave} : valor-> {valor}\\n\")\n",
    "    \n",
    "chave->CardHolderName : valor-> {'type': 'string', 'content': 'ADAM SMITH', 'boundingRegions': [{'pageNumber': 1, 'polygon': [167, 445, 365, 446, 365, 481, 167, 480]}], 'confidence': 0.995, 'spans': [{'offset': 50, 'length': 10}]}\n",
    "\n",
    "chave->CardNumber : valor-> {'type': 'string', 'content': '5412 1234 5656 8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [166, 313, 715, 313, 715, 357, 166, 357]}], 'confidence': 0.995, 'spans': [{'offset': 13, 'length': 19}]}\n",
    "\n",
    "chave->CardVerificationValue : valor-> {'type': 'string', 'content': '123', 'boundingRegions': [{'pageNumber': 1, 'polygon': [544, 784, 586, 785, 586, 811, 544, 810]}], 'confidence': 0.995, 'spans': [{'offset': 134, 'length': 3}]}\n",
    "\n",
    "chave->CustomerServicePhoneNumbers : valor-> {'type': 'array', 'valueArray': [{'type': 'string', 'valueString': '+1 200-345-6789', 'content': '+1 200-345-6789', 'boundingRegions': [{'pageNumber': 1, 'polygon': [324, 610, 447, 610, 447, 627, 324, 627]}], 'spans': [{'offset': 99, 'length': 15}]}, {'type': 'string', 'valueString': '+1 200-000-8888', 'content': '+1 200-000-8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [471, 610, 594, 610, 594, 627, 471, 627]}], 'spans': [{'offset': 118, 'length': 15}]}]}\n",
    "\n",
    "chave->ExpirationDate : valor-> {'type': 'date', 'content': '01/28', 'boundingRegions': [{'pageNumber': 1, 'polygon': [227, 391, 319, 391, 319, 424, 226, 424]}], 'confidence': 0.995, 'spans': [{'offset': 39, 'length': 5}]}\n",
    "\n",
    "chave->IssuingBank : valor-> {'type': 'string', 'content': 'Contoso Bank', 'boundingRegions': [{'pageNumber': 1, 'polygon': [170, 172, 475, 171, 475, 213, 170, 214]}], 'confidence': 0.995, 'spans': [{'offset': 0, 'length': 12}]}\n",
    "\n",
    "chave->PaymentNetwork : valor-> {'type': 'string', 'content': 'mastercard', 'boundingRegions': [{'pageNumber': 1, 'polygon': [632, 464, 717, 463, 717, 477, 632, 477]}], 'confidence': 0.991, 'spans': [{'offset': 61, 'length': 10}]}\n",
    "\n",
    "card_fields['CustomerServicePhoneNumbers']['valueArray']\n",
    "[{'type': 'string', 'valueString': '+1 200-345-6789', 'content': '+1 200-345-6789', 'boundingRegions': [{'pageNumber': 1, 'polygon': [324, 610, 447, 610, 447, 627, 324, 627]}], 'spans': [{'offset': 99, 'length': 15}]},\n",
    " {'type': 'string', 'valueString': '+1 200-000-8888', 'content': '+1 200-000-8888', 'boundingRegions': [{'pageNumber': 1, 'polygon': [471, 610, 594, 610, 594, 627, 471, 627]}], 'spans': [{'offset': 118, 'length': 15}]}]\n",
    "\n",
    "#criar um dicionário vazio:\n",
    "result = {}\n",
    "# percorrer sobre o dicionário\n",
    "for key, value in card_fields.items():\n",
    "    if \"valueArray\" in value:\n",
    "        result[key] = [v['content'] for v in value[\"valueArray\"]]\n",
    "        # print(result)\n",
    "    else:\n",
    "        result[key] = value['content']\n",
    "result\n",
    "        \n",
    "{'CardHolderName': 'ADAM SMITH',\n",
    " 'CardNumber': '5412 1234 5656 8888',\n",
    " 'CardVerificationValue': '123',\n",
    " 'CustomerServicePhoneNumbers': ['+1 200-345-6789', '+1 200-000-8888'],\n",
    " 'ExpirationDate': '01/28',\n",
    " 'IssuingBank': 'Contoso Bank',\n",
    " 'PaymentNetwork': 'mastercard'}\n",
    "\n",
    "import pandas as pd \n",
    "pd.DataFrame.from_dict(result, orient='index', columns=['value'])\n",
    "\n",
    "# %%writefile src/services/credit_card_service.py\n",
    "from src.utils.Config import Config\n",
    "from azure.core.credentials import AzureKeyCredential\n",
    "from azure.ai.documentintelligence import DocumentIntelligenceClient\n",
    "from azure.ai.documentintelligence.models import AnalyzeDocumentRequest\n",
    "import pandas as pd \n",
    "\n",
    "def detect_credit_card_info(card_url):\n",
    "    \"\"\"\n",
    "    Extrai informações de um catão de crédito\n",
    "\n",
    "    Args:\n",
    "        card_url: url de uma imagem de cartão de crédito\n",
    "\n",
    "    Return: \n",
    "        Um dataframe com as informações do cartão de crédito\n",
    "    \"\"\"\n",
    "    credential = AzureKeyCredential(Config.KEY)\n",
    "    document_client = DocumentIntelligenceClient(Config.ENDPOINT, credential)\n",
    "    card_info = document_client.begin_analyze_document(\n",
    "        \"prebuilt-creditCard\", AnalyzeDocumentRequest(url_source=card_url)\n",
    "    )\n",
    "    result = card_info.result()\n",
    "\n",
    "    # Extract fields from the first document (assuming one card per image)\n",
    "    fields = result.documents[0].get('fields', {})\n",
    "\n",
    "    # Flatten the nested dictionary to a simple dictionary\n",
    "    result = {}\n",
    "    for key, value in fields.items():\n",
    "        if 'valueArray' in value:\n",
    "            # Handle arrays of values\n",
    "            result[key] = [v['valueString'] for v in value['valueArray']]\n",
    "        else:\n",
    "            result[key] = value['content']\n",
    "\n",
    "    # Create a Pandas DataFrame from the flattened dictionary\n",
    "    df = pd.DataFrame.from_dict(result, orient='index', columns=['value'])\n",
    "\n",
    "    return df\n",
    "Writing src/services/credit_card_service.py\n",
    "detect_credit_card_info(\"https://documentintelligence.ai.azure.com/documents/samples/prebuilt/credit-card-horizontal.png\")\n",
    "\n",
    "\n",
    "$ task format src/services/credit_card_service.py\n",
    "Fixing /home/jcnok/bootcamps/Bootcamp-Microsoft-Certification-Challenge--1-AI_102/desafios_de_projeto/desafio_2/src/services/credit_card_service.py\n",
    "Skipping .ipynb files as Jupyter dependencies are not installed.\n",
    "You can fix this by running ``pip install \"black[jupyter]\"\n",
    "reformatted /home/jcnok/bootcamps/Bootcamp-Microsoft-Certification-Challenge--1-AI_102/desafios_de_projeto/desafio_2/src/services/credit_card_service.py\n",
    "\n",
    "All done! ✨ 🍰 ✨\n",
    "file formatted files left unchanged.\n",
    "\n",
    "$ git checkout -b task3\n",
    "Switched to a new branch 'task3'\n",
    "\n",
    "$ git branch \n",
    "  master\n",
    "  task1\n",
    "  task2\n",
    "* task3\n",
    "\n",
    "$ git add src/services/credit_card_service.py \n",
    "$ git commit -m \"add: task3 finalizada com sucesso!\"\n",
    "[task3 60b641e] add: task3 finalizada com sucesso!\n",
    " 1 file changed, 40 insertions(+)\n",
    " create mode 100644 desafios_de_projeto/desafio_2/src/services/credit_card_service.py\n",
    "\n",
    "$ git push origin task3\n",
    "Enumerating objects: 12, done.\n",
    "Counting objects: 100% (12/12), done.\n",
    "Delta compression using up to 24 threads\n",
    "Compressing objects: 100% (7/7), done.\n",
    "Writing objects: 100% (7/7), 1.20 KiB | 1.20 MiB/s, done.\n",
    "Total 7 (delta 2), reused 0 (delta 0), pack-reused 0\n",
    "remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\n",
    "remote: \n",
    "remote: Create a pull request for 'task3' on GitHub by visiting:\u001b[K\n",
    "remote:      https://github.com/Jcnok/Bootcamp-Microsoft-Certification-Challenge--1-AI_102/pull/new/task3\u001b[K\n",
    "remote: \n",
    "To https://github.com/Jcnok/Bootcamp-Microsoft-Certification-Challenge--1-AI_102.git\n",
    " * [new branch]      task3 -> task3\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20938539",
   "metadata": {},
   "source": [
    "- Nova adaptação para estudo do link: https://web.dio.me/topics/analise-de-documentos-anti-fraude-com-azureai-tarefa-2?back=%2Ftrack%2Fmicrosoft-certification-challenge-4-ai-102&order=undefined&page=1&search=projeto&tab=forum&track_id=5437dc46-3ffb-48f1-a3cd-03bb51968564"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbb894a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from src.utils.Config import Config\n",
    "\n",
    "Config.CONTAINER_NAME\n",
    "'cartoes'\n",
    "\n",
    "# importação da lib para conexão:  \n",
    "from azure.storage.blob import BlobServiceClient\n",
    "BlobServiceClient.from_connection_string()\n",
    "\n",
    "# criando a conexão:\n",
    "blob_service_client = BlobServiceClient.from_connection_string(Config.STORAGE_CONNECTION)\n",
    "\n",
    "# Verificano o que tenho dentro do meu container de nome cartão:\n",
    "container_client = blob_service_client.get_container_client(container=Config.CONTAINER_NAME)\n",
    "blob_list = container_client.list_blobs()\n",
    "for blob in blob_list:\n",
    "    print(f\"Name: {blob.name}\")\n",
    "Name: 6dcbfb18-a936-45b6-96aa-18c97a780943.jpg\n",
    "Name: 9ee8b449-afee-442c-a4e6-67c539031b50.png\n",
    "Name: c0b2dbb7-f7b8-4745-a728-b0cc6a32297b.jpg\n",
    "Name: cartao-pre-pago-standard.jpg\n",
    "Name: credit-card-horizontal[1].png\n",
    "Name: imagem.png\n",
    "\n",
    "# vamos testar este exemplo simples\n",
    "blob_client = blob_service_client.get_blob_client(Config.CONTAINER_NAME, blob=\"teste_upload.txt\")\n",
    "data = b\"Vamos enviar esse texto no nosso container pra ver o que acontece.\"\n",
    "\n",
    "# Upload the blob data - default blob type is BlockBlob\n",
    "blob_client.upload_blob(data, blob_type=\"BlockBlob\")\n",
    "{'etag': '\"0x8DCFE76967847F9\"',\n",
    " 'last_modified': datetime.datetime(2024, 11, 6, 15, 20, 46, tzinfo=datetime.timezone.utc),\n",
    " 'content_md5': bytearray(b'\\x14\\x03\\x84\\x96z\\xd4\\x8a\\xea\\x07\\x15c7(\\xd2I\\xe5'),\n",
    " 'client_request_id': '50428478-9c51-11ef-b397-7f38ab652918',\n",
    " 'request_id': '068094c3-c01e-0089-475f-30d7c0000000',\n",
    " 'version': '2024-11-04',\n",
    " 'version_id': None,\n",
    " 'date': datetime.datetime(2024, 11, 6, 15, 20, 46, tzinfo=datetime.timezone.utc),\n",
    " 'request_server_encrypted': True,\n",
    " 'encryption_key_sha256': None,\n",
    " 'encryption_scope': None}\n",
    "\n",
    "blob_client = blob_service_client.get_blob_client(container=Config.CONTAINER_NAME, blob=\"teste_upload.txt\")\n",
    "# encoding param is necessary for readall() to return str, otherwise it returns bytes\n",
    "downloader = blob_client.download_blob(max_concurrency=1, encoding='UTF-8')\n",
    "blob_text = downloader.readall()\n",
    "print(f\"Blob contents: {blob_text}\")\n",
    "Blob contents: Vamos enviar esse texto no nosso container pra ver o que acontece.\n",
    "\n",
    "blob_client = blob_service_client.get_blob_client(Config.CONTAINER_NAME, 'foto.png')\n",
    "blob_client.upload_blob(\"data/cartao-pre-pago-standard.jpg\", overwrite=True)\n",
    "blob_client.url\n",
    "'https://stdiolab2.blob.core.windows.net/cartoes/foto.png'\n",
    "\n",
    "blob_client = blob_service_client.get_blob_client(Config.CONTAINER_NAME, 'foto.png')\n",
    "# Upload the created file\n",
    "with open(file=\"data/cartao-pre-pago-standard.jpg\", mode=\"rb\") as data:\n",
    "    blob_client.upload_blob(data, overwrite=True)\n",
    "blob_client.url\n",
    "'https://stdiolab2.blob.core.windows.net/cartoes/foto.png'\n",
    "\n",
    "# %%writefile src/services/blob_service.py\n",
    "from azure.storage.blob import BlobServiceClient \n",
    "from src.utils.Config import Config \n",
    "\n",
    "def upload_to_blob(source, filename=None) -> str:\n",
    "    \"\"\"\n",
    "    Faz o upload de uma imagem para o Azure Blob Storage\n",
    "\n",
    "    Args:\n",
    "        source: imagem com o caminho completo. ex:\"img/imagem.png\" \n",
    "        filename:Nome opcional para o arquivo.\n",
    "\n",
    "    Returns: \n",
    "        str: URL do blob\n",
    "    \"\"\" \n",
    "    if not filename:        \n",
    "        file = source.split('.')[0].split('/')[-1]\n",
    "        extension = source.split('.')[-1]\n",
    "        filename = f\"{file}.{extension}\"\n",
    "        \n",
    "    # Upload para o blob\n",
    "    blob_service_client = BlobServiceClient.from_connection_string(Config.STORAGE_CONNECTION)\n",
    "    blob_client = blob_service_client.get_blob_client(Config.CONTAINER_NAME, filename)\n",
    "    with open(file=\"data/cartao-pre-pago-standard.jpg\", mode=\"rb\") as data:\n",
    "        blob_client.upload_blob(data, overwrite=True)\n",
    "    return blob_client.url\n",
    "Writing src/services/blob_service.py\n",
    "\n",
    "# Coloquei propositalmente sem o nome do arquivo para ver se será tratado corretamente pois eu deixei como opcional.\n",
    "upload_to_blob(\"data/cartao-pre-pago-standard.jpg\") \n",
    "'https://stdiolab2.blob.core.windows.net/cartoes/cartao-pre-pago-standard.jpg'\n",
    "\n",
    "$ task format src/services/blob_service.py\n",
    "Skipping .ipynb files as Jupyter dependencies are not installed.\n",
    "You can fix this by running ``pip install \"black[jupyter]\"\n",
    "\n",
    "$ git checkout -b task2\n",
    "Switched to a new branch 'task2'\n",
    "\n",
    "$ git branch\n",
    "  master\n",
    "  task1\n",
    "* task2\n",
    "\n",
    "$ git status\n",
    "On branch task2\n",
    "Changes not staged for commit:\n",
    "  (use \"git add <file>...\" to update what will be committed)\n",
    "  (use \"git restore <file>...\" to discard changes in working directory)\n",
    "\tmmodified:   PoC_desafio2.ipynb\n",
    "\n",
    "Untracked files:\n",
    "  (use \"git add <file>...\" to include in what will be committed)\n",
    "\tsrc/services/blob_service.py\n",
    "\n",
    "no changes added to commit (use \"git add\" and/or \"git commit -a\")\n",
    "\n",
    "$ git add src/services/blob_service.py\n",
    "\n",
    "$ git commit -m \"add: task2 finalizada com sucesso!\"\n",
    "[task2 0b0ab68] add: task2 finalizada com sucesso!\n",
    " 1 file changed, 29 insertions(+)\n",
    " create mode 100644 desafios_de_projeto/desafio_2/src/services/blob_service.py\n",
    "\n",
    "# git push origin task2\n",
    "Enumerating objects: 12, done.\n",
    "Counting objects: 100% (12/12), done.\n",
    "Delta compression using up to 24 threads\n",
    "Compressing objects: 100% (7/7), done.\n",
    "Writing objects: 100% (7/7), 1.02 KiB | 1.02 MiB/s, done.\n",
    "Total 7 (delta 2), reused 0 (delta 0), pack-reused 0\n",
    "remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\u001b[K\n",
    "remote: \n",
    "remote: Create a pull request for 'task2' on GitHub by visiting:\u001b[K\n",
    "remote:      https://github.com/Jcnok/Bootcamp-Microsoft-Certification-Challenge--1-AI_102/pull/new/task2\u001b[K\n",
    "remote: \n",
    "To https://github.com/Jcnok/Bootcamp-Microsoft-Certification-Challenge--1-AI_102.git\n",
    " * [new branch]      task2 -> task2\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aedc5f51",
   "metadata": {},
   "source": [
    "- Projeto adaptado das aulas assistidas: https://web.dio.me/project/analise-de-documentos-anti-fraude-com-azureai/learning/81d83a29-2225-41a0-86bf-d7f2a1d45110?back=/track/microsoft-certification-challenge-4-ai-102&tab=forum&moduleId=undefined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4d0e9aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
